module convolution #(parameter N = 16, parameter LEN1 = 3, parameter LEN2 = 50)(
    input signed [N-1:0] signal1 [0:LEN1-1],
    input signed [N-1:0] signal2 [0:LEN2-1],
    output signed [2*N-1:0] conv_result [0:(LEN1+LEN2-2)]
);

    integer i, j;
    reg signed [2*N-1:0] temp_conv [0:(LEN1+LEN2-2)];
    
    always @(*) begin
        // Initialize result array to zero
        for (i = 0; i < LEN1 + LEN2 - 1; i = i + 1) begin
            temp_conv[i] = 0;
        end

        // Perform convolution
        for (i = 0; i < LEN1; i = i + 1) begin
            for (j = 0; j < LEN2; j = j + 1) begin
                temp_conv[i + j] = temp_conv[i + j] + (signal1[i] * signal2[j]);
            end
        end
    end

    // Assign final result
    assign conv_result = temp_conv;

endmodule
